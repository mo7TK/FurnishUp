const express = require('express');
const mongoose = require('mongoose');
const router = express.Router();
const vm = require('vm'); // Pour ex√©cution sandbox√©e
const { GoogleGenerativeAI } = require('@google/generative-ai');
const produit = require('../models/produitModel');
const userModel = require('../models/userModel');
const commandeModel = require('../models/commandeModel');
// üí° Remplace ceci par ta vraie cl√© API

const genAI = new GoogleGenerativeAI("AIzaSyBA6QA_bLho6Cok74eAcyrb17yM4x_LC9s");

//  Contexte que le bot utilisera pour filtrer les r√©ponses


const CONTEXT = `Tu es un agent chatbot intelligent pour le site e-commerce FurnishUp.

FurnishUp est une plateforme sp√©cialis√©e dans la vente et l‚Äôachat de meubles pour la maison.  
Les utilisateurs peuvent acheter des meubles (Salon, Cuisine, Salle de bains, ,Rangement ,Exterieur ,Chambre, Bureau, D√©coration, ) ou en vendre.  

### Fonctionnement du site :

üî∏ Pour acheter :
- L‚Äôutilisateur consulte les produits, les ajoute au panier, puis proc√®de au paiement (carte bancaire ou autre) ou bien clique sur acheter maintenant sans avoir a ajouter au panier.
- Il doit √™tre connect√© (ou cr√©er un compte s‚Äôil n‚Äôen a pas).
- Il fournit son adresse pour la livraison.

üî∏ Pour vendre :
- L‚Äôutilisateur (acheteur ou vendeur) ajoute un produit via son profil.
- Il choisit une cat√©gorie, renseigne les informations (prix, √©tat, etc.).
- Le produit est valid√© par un administrateur avant d‚Äô√™tre visible.

---

### üìö Sch√©ma de la base de donn√©es :

üßë‚Äçüíº **User**
- nom : String
- lastname : String
- address : String
- email : String (unique)
- password : String
- createdAt / updatedAt : Date

ü™ë **Produit**
- nom : String
- description : String
- prix : Number
- prixReduction : Number (optionnel)
- categorie : String (ex: Salon, cuisine, d√©coration, etc.)
- dimensions : largeur, hauteur, profondeur
- couleur : String
- materiau : String
- etat : "Neuf" ou "Occasion"
- images : liste de Strings
- quantite_disponible : Number
- vendeur_id : r√©f√©rence vers User
- date_ajout : Date
- valider : Boolean
- commentaires : liste de {
    utilisateur_id : r√©f√©rence vers User,
    nom_utilisateur : String,
    note : Number (1 √† 5),
    commentaire : String,
    date : Date
  }

üì¶ **Commande**
- utilisateur : r√©f√©rence vers User
- produits : liste de {
    produit : r√©f√©rence vers Produit,
    quantite : Number,
    envoyer : Boolean
  }
- date : Date
- statut : String ("En attente", "Envoy√©e", etc.)

---

### üß† R√®gles de r√©ponse :

- Si la question est simple (ex : ‚Äúcomment acheter un meuble ?‚Äù), r√©ponds naturellement comme un assistant.(et ne roponde jamais sur les qst hors sujet par exemple c'est quoi la capital de la france)
- Si la question n√©cessite d‚Äôinterroger la base de donn√©es, g√©n√®re uniquement du code JavaScript (Mongoose/MongoDB) entre ces balises (et utilise exactement quoi il ya dans le shema psq dons certain cas il ya des buge avec le majuscule et le miniscule dans la premiere lettre par exemple la categorie Salon) (ecrire moi juste le code entre les balise et ne ajoute rien apres les balise et donner juste le reqete nesisite par exemple sous cette forme : <!-- MONGODB_QUERY_START -->
Produit.find().sort({ prix: 1 }).limit(1)
<!-- MONGODB_QUERY_END --> donc ne ajoute rien comme quoi jai envoyer exactement sans then(), sans async. Utilise uniquement des appels comme Produit.find(...), User.findOne(...), etc. N‚Äôinclus pas de console.log, ni de return, ni de promesses. on gros juste renvoyer qu'une requ√™te MongoDB simple √† la fois) 

`;


// Fonction pour s√©curiser les requ√™tes MongoDB
const secureMongoQuery = (query) => {
  const blacklist = ['eval', 'exec', 'drop', 'delete', 'require', 'fs', 'process','update'];
  for (let bad of blacklist) {
    if (query.toLowerCase().includes(bad)) {
      throw new Error('Requ√™te MongoDB dangereuse d√©tect√©e');
    }
  }
  return query;
};

// Fonction pour ex√©cuter une requ√™te dans une sandbox
const executeMongoQuery = async (queryString) => {
  const context = {
    Produit: produit,
    User: userModel,
    Commande: commandeModel,
    console: console
  };

  vm.createContext(context);

  const script = new vm.Script(`(async () => await ${queryString})()`);
  return await script.runInContext(context);
};

router.post('/', async (req, res) => {
  try {
    const question = req.body.message;
    console.log("Question re√ßue :", question);

    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

    const result = await model.generateContent({
      contents: [
        {
          parts: [{ text: `${CONTEXT}\n\nQuestion : ${question}` }]
        }
      ]
    });

    const response = result.response;
    const text = await response.text();
    console.log("R√©ponse AI :", text);

    if (text.includes("<!-- MONGODB_QUERY_START -->") && text.includes("<!-- MONGODB_QUERY_END -->")) {
      const query = text.split("<!-- MONGODB_QUERY_START -->")[1].split("<!-- MONGODB_QUERY_END -->")[0].trim();
    
      console.log(query);
      const secureQuery = secureMongoQuery(query);
      const dbResult = await executeMongoQuery(secureQuery);
      console.log(dbResult);
     // Cas 1 : tableau de produits
      if (Array.isArray(dbResult)) {
        if (dbResult.length === 0) {
          return res.json({ answer: "D√©sol√©, je n'ai trouv√© aucun produit correspondant √† votre demande." });
        } else if (dbResult.length === 1) {
          return res.json({ answer: "Voici le produit trouv√© :", products: dbResult });
        } else {
          return res.json({ answer: "Voici quelques produits :", products: dbResult.slice(0, 3) });
        }
      }

      // Cas 2 : r√©sultat num√©rique (compte)
      if (typeof dbResult === 'number') {
        if (dbResult === 0) {
          return res.json({ answer: "D√©sol√©, aucun produit trouv√©." });
        } else {
          return res.json({ answer: `Il y a ${dbResult} produit(s) correspondant(s) √† votre demande.` });
        }
      }

      // Cas 3 : objet seul (ex: findOne)
      if (typeof dbResult === 'object' && dbResult !== null) {
        return res.json({ answer: "Voici le produit :", products: [dbResult] });
      }

      // Cas inattendu
      return res.json({ answer: "D√©sol√©, je n'ai pas pu traiter votre demande correctement." });
    }

    // Sinon : r√©ponse textuelle normale
    res.json({ answer: text });

  } catch (error) {
    console.error("Erreur Gemini ou MongoDB :", error);
    res.status(500).json({ error: "Erreur lors de la r√©ponse du chatbot" });
  }
});

module.exports = router;